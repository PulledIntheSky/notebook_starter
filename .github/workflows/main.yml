name: Docker Puppeteer Screenshots

on:
  push:
    branches:
      - main

jobs:
  run_containers:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Setup Docker
        uses: docker/setup-buildx-action@v1

      - name: Create screenshots directory
        run: mkdir -p screenshots

      - name: Run Puppeteer Containers and Capture Screenshots
        id: puppeteer_containers
        run: |
          container_ids=()
          for ((i=1; i<=5; i++)); do
            container_id=$(docker run -d --name puppeteer_$i \
              -v $(pwd)/screenshots:/screenshots \
              alekzonder/puppeteer:latest \
              bash -c "\
                mkdir -p /tmp/screenshots && \
                cd /tmp/screenshots && \
                mkdir -p /screenshots/puppeteer_$i && \
                node -e 'const puppeteer = require(\"puppeteer\"); \
                          (async () => { \
                            const browser = await puppeteer.launch({ \
                              headless: true \
                            }); \
                            const page = await browser.newPage(); \
                            await page.goto(\"https://www.whatismyipaddress.com\"); \
                            await page.waitForTimeout(10000); // Wait for 10 seconds \
                            await page.screenshot({ path: \"/tmp/screenshots/screenshot.png\" }); \
                            console.log(\"Screenshot saved for container puppeteer_$i\"); \
                            await page.waitForTimeout(4000); // Wait for 4 seconds \
                            await browser.close(); \
                          })();' 2>&1")

            container_ids+=("$container_id")
          done

          echo "CONTAINER_IDS=${container_ids[*]}" >> $GITHUB_ENV

      - name: Wait for Puppeteer Containers to Finish
        run: sleep 120  # Adjust as needed based on the expected runtime of Puppeteer processes

      - name: Retrieve Screenshots from Containers
        run: |
          container_ids=($CONTAINER_IDS)

          for container_id in "${container_ids[@]}"; do
            # Check if container exists and is running or stopped
            if docker ps -a --format '{{.Names}}' | grep -Eq "^$container_id$"; then
              # Ensure screenshots directory exists on host
              mkdir -p screenshots/$container_id
              # Copy screenshot from container to host
              docker cp $container_id:/tmp/screenshots/screenshot.png screenshots/$container_id/
            else
              echo "Container $container_id does not exist or is not running."
            fi
          done

      - name: List screenshots
        run: ls -R screenshots

      - name: Upload Artifacts
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: screenshots
          path: screenshots
          if-no-files-found: error
